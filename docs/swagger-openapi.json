{
    "openapi": "3.0.3",
    "info": {
        "title": "test-foundarium",
        "description": "Даны два списка. Список автомобилей и список пользователей.\nC помощью laravel сделать api для управления списком использования автомобилей пользователями.\nВ один момент времени 1 пользователь может управлять только одним автомобилем. \nВ один момент времени 1 автомобилем может управлять только 1 пользователь.",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "http://localhost:${PORT}"
        }
    ],
    "paths": {
        "/api/users": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "",
                "requestBody": {
                    "description": "Created user object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPostRequestContent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrors"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get users list",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                   "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user_id}": {
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "description": "",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated user object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPutRequestContent"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrors"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content."
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user",
                "description": "",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cars": {
            "post": {
                "tags": [
                    "car"
                ],
                "summary": "Create car",
                "description": "",
                "requestBody": {
                    "description": "Created car object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarRequestContent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrors"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "car"
                ],
                "summary": "Get cars list",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Car"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cars/{car_id}": {
            "put": {
                "tags": [
                    "car"
                ],
                "summary": "Update car",
                "description": "",
                "parameters": [
                    {
                        "name": "car_id",
                        "in": "path",
                        "description": "Id of the car",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated car object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarRequestContent"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrors"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "car"
                ],
                "summary": "Delete car",
                "description": "",
                "parameters": [
                    {
                        "name": "car_id",
                        "in": "path",
                        "description": "Id of the car",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content."
                    },
                    "404": {
                        "description": "Car not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "car"
                ],
                "summary": "Get car",
                "description": "",
                "parameters": [
                    {
                        "name": "car_id",
                        "in": "path",
                        "description": "Id of the car",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cars-rental": {
            "post": {
                "tags": [
                    "car-rental"
                ],
                "summary": "Create car rental",
                "description": "",
                "requestBody": {
                    "description": "Created car object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarRentalRequestContent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarRental"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrors"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "car-rental"
                ],
                "summary": "Get cars rental list",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CarRental"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cars-rental/{car_rental_id}": {
            "delete": {
                "tags": [
                    "car-rental"
                ],
                "summary": "Delete car rental",
                "description": "",
                "parameters": [
                    {
                        "name": "car_rental_id",
                        "in": "path",
                        "description": "Id of the car rental",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content."
                    },
                    "404": {
                        "description": "Car rental not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "UserPostRequestContent": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "test@example.com"
                    },
                    "email": {
                        "type": "string",
                        "example": "Ivan Petrov"
                    },
                    "password": {
                        "type": "string",
                        "example": "qwerty123"
                    }
                },
                "required": ["name", "email", "password"]
            },
            "UserPutRequestContent": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "test@example.com"
                    },
                    "email": {
                        "type": "string",
                        "example": "Ivan Petrov"
                    }
                },
                "required": ["name", "email"]
            },
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "test@example.com"
                    },
                    "email": {
                        "type": "string",
                        "example": "Ivan Petrov"
                    }
                },
                "required": ["id", "name", "email"]
            },
            "CarRequestContent": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string",
                        "example": "Volkswagen"
                    },
                    "name": {
                        "type": "string",
                        "example": "Golf R"
                    },
                    "registration_plate": {
                        "type": "string",
                        "example": "В888ВВ88"
                    }
                },
                "required": ["model", "name", "registration_plate"]
            },
            "Car": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "model": {
                        "type": "string",
                        "example": "Volkswagen"
                    },
                    "name": {
                        "type": "string",
                        "example": "Golf R"
                    },
                    "registration_plate": {
                        "type": "string",
                        "example": "В888ВВ88"
                    }
                },
                "required": ["id", "model", "name", "registration_plate"]
            },
            "CarRentalRequestContent": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "car_id": {
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "CarRental": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "car": {
                        "$ref": "#/components/schemas/Car"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                }
            },
            "BadRequestError": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "example": 400
                    },
                    "message": {
                        "type": "string",
                        "example": "Car in use, cannot be removed."
                    },
                    "trace": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["status", "message"]
            },
            "NotFoundError": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "example": 404
                    },
                    "message": {
                        "type": "string",
                        "example": "Resource not found."
                    },
                    "trace": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["status", "message"]
            },
            "ValidationErrors": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "integer",
                                "example": 422
                            },
                            "message": {
                                "type": "string",
                                "example": "The registration plate format is invalid."
                            },
                            "list": {
                                "type": "object",
                                "properties": {
                                    "fieldName": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "The registration plate format is invalid."
                                        ]
                                    }
                                }
                            }
                        },
                        "required": ["status", "message", "list"]
                    }
                }
            }
        }
    }
}
